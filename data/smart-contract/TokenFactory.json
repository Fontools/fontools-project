{
  "address": "0xec2E169dafE5dd8dE9fE8fEA337AeC50a910a38E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "price_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "TokenToId",
      "outputs": [
        {
          "internalType": "contract Token",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "price_",
          "type": "uint256"
        }
      ],
      "name": "changePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "createToken",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "id",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "withdrawETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        }
      ],
      "name": "withdrawToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x276049764844785eab674b30d0a3518838ac1aceb00a5a856ec852c90db4f2a9",
  "receipt": {
    "to": null,
    "from": "0x5E6Fc266E098C241B1a1c5c41b026ADCf66EdE93",
    "contractAddress": "0xec2E169dafE5dd8dE9fE8fEA337AeC50a910a38E",
    "transactionIndex": 7,
    "gasUsed": "3516744",
    "logsBloom": "0x
    "blockHash": "0x2248ae52a029ec0707d1364852b3e7e44de572f1201439a02ed1543c1bc6b391",
    "transactionHash": "0x276049764844785eab674b30d0a3518838ac1aceb00a5a856ec852c90db4f2a9",
    "logs": [
      {
        "transactionIndex": 7,
        "blockNumber": 29485292,
        "transactionHash": "0x276049764844785eab674b30d0a3518838ac1aceb00a5a856ec852c90db4f2a9",
        "address": "0xec2E169dafE5dd8dE9fE8fEA337AeC50a910a38E",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005e6fc266e098c241b1a1c5c41b026adcf66ede93"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x2248ae52a029ec0707d1364852b3e7e44de572f1201439a02ed1543c1bc6b391"
      }
    ],
    "blockNumber": 29485292,
    "cumulativeGasUsed": "3751090",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "25000000000000000"
  ],
  "numDeployments": 5,
  "solcInputHash": "d6ee765dfcb7157c943720476ffe243f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TokenToId\",\"outputs\":[{\"internalType\":\"contract Token\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price_\",\"type\":\"uint256\"}],\"name\":\"changePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"createToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"id\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokenFactory.sol\":\"TokenFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Token is ERC20, ERC20Burnable, Pausable, Ownable {\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        uint256 amount\\n    ) ERC20(name, symbol) {\\n        _mint(msg.sender, amount * 10 ** decimals());\\n    }\\n\\n    function pause() public onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyOwner {\\n        _unpause();\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal override whenNotPaused {\\n        super._beforeTokenTransfer(from, to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xc85b3e22c53b53ab34a34e9bcb48e709814b06b23be7af80093fe9c7d53e9e9d\",\"license\":\"MIT\"},\"contracts/TokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./Token.sol\\\";\\n\\ncontract TokenFactory is Ownable {\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for Token;\\n\\n    uint256 public price;\\n\\n    uint256 public id;\\n\\n    mapping(uint256 => Token) public TokenToId;\\n\\n    constructor(uint256 price_) {\\n        price = price_;\\n    }\\n\\n    function createToken(\\n        string memory name,\\n        string memory symbol,\\n        uint256 amount\\n    ) external payable {\\n        require(\\n            msg.value >= price,\\n            \\\"TokenFactory: you didn't pay for token creation\\\"\\n        );\\n\\n        Token token = new Token(name, symbol, amount);\\n\\n        TokenToId[++id] = token;\\n\\n        token.transferOwnership(_msgSender());\\n\\n        token.safeTransfer(_msgSender(), amount * 10 ** 18);\\n    }\\n\\n    function changePrice(uint256 price_) external onlyOwner {\\n        price = price_;\\n    }\\n\\n    function withdrawToken(address to, address token_) external onlyOwner {\\n        IERC20 tokenToWithdraw = IERC20(token_);\\n\\n        tokenToWithdraw.safeTransfer(\\n            to,\\n            tokenToWithdraw.balanceOf(address(this))\\n        );\\n    }\\n\\n    function withdrawETH(address payable to) external onlyOwner {\\n        to.transfer(address(this).balance);\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xd6ebe0898073de08cd4480542ea6a7aca700b7472fa633d05d387b3777c5bf41\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162003fd738038062003fd7833981810160405281019062000037919062000171565b620000576200004b6200006560201b60201c565b6200006d60201b60201c565b8060018190555050620001a3565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b6000819050919050565b6200014b8162000136565b81146200015757600080fd5b50565b6000815190506200016b8162000140565b92915050565b6000602082840312156200018a576200018962000131565b5b60006200019a848285016200015a565b91505092915050565b613e2480620001b36000396000f3fe608060405260043610620000a35760003560e01c8063a035b1fe1162000061578063a035b1fe1462000176578063a2b40d1914620001a6578063af640d0f14620001d4578063d16901601462000204578063f2fde38b146200024857620000ab565b80633aeac4e114620000b05780635b06053014620000de578063690d832014620000fe578063715018a6146200012c5780638da5cb5b146200014657620000ab565b36620000ab57005b600080fd5b348015620000bd57600080fd5b50620000dc6004803603810190620000d6919062000b8a565b62000276565b005b620000fc6004803603810190620000f6919062000d6e565b62000345565b005b3480156200010b57600080fd5b506200012a600480360381019062000124919062000e4d565b620004ff565b005b3480156200013957600080fd5b506200014462000554565b005b3480156200015357600080fd5b506200015e6200056c565b6040516200016d919062000e90565b60405180910390f35b3480156200018357600080fd5b506200018e62000595565b6040516200019d919062000ebe565b60405180910390f35b348015620001b357600080fd5b50620001d26004803603810190620001cc919062000edb565b6200059b565b005b348015620001e157600080fd5b50620001ec620005af565b604051620001fb919062000ebe565b60405180910390f35b3480156200021157600080fd5b506200023060048036038101906200022a919062000edb565b620005b5565b6040516200023f919062000f78565b60405180910390f35b3480156200025557600080fd5b506200027460048036038101906200026e919062000f95565b620005e8565b005b6200028062000673565b600081905062000340838273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401620002c5919062000e90565b60206040518083038186803b158015620002de57600080fd5b505afa158015620002f3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000319919062000fde565b8373ffffffffffffffffffffffffffffffffffffffff16620006f89092919063ffffffff16565b505050565b6001543410156200038d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003849062001097565b60405180910390fd5b6000838383604051620003a09062000b03565b620003ae939291906200113b565b604051809103906000f080158015620003cb573d6000803e3d6000fd5b5090508060036000600260008154620003e490620011b5565b919050819055815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1663f2fde38b6200045c62000782565b6040518263ffffffff1660e01b81526004016200047a919062000e90565b600060405180830381600087803b1580156200049557600080fd5b505af1158015620004aa573d6000803e3d6000fd5b50505050620004f9620004bc62000782565b670de0b6b3a764000084620004d2919062001203565b8373ffffffffffffffffffffffffffffffffffffffff16620006f89092919063ffffffff16565b50505050565b6200050962000673565b8073ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505015801562000550573d6000803e3d6000fd5b5050565b6200055e62000673565b6200056a60006200078a565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60015481565b620005a562000673565b8060018190555050565b60025481565b60036020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b620005f262000673565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141562000665576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200065c90620012da565b60405180910390fd5b62000670816200078a565b50565b6200067d62000782565b73ffffffffffffffffffffffffffffffffffffffff166200069d6200056c565b73ffffffffffffffffffffffffffffffffffffffff1614620006f6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620006ed906200134c565b60405180910390fd5b565b6200077d8363a9059cbb60e01b84846040516024016200071a9291906200136e565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506200084e565b505050565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000620008b2826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166200091d9092919063ffffffff16565b9050600081511115620009185780806020019051810190620008d59190620013d8565b62000917576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200090e9062001480565b60405180910390fd5b5b505050565b60606200092e848460008562000937565b90509392505050565b6060824710156200097f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620009769062001518565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051620009aa919062001587565b60006040518083038185875af1925050503d8060008114620009e9576040519150601f19603f3d011682016040523d82523d6000602084013e620009ee565b606091505b509150915062000a018783838762000a0d565b92505050949350505050565b6060831562000a785760008351141562000a6f5762000a2c8562000a8d565b62000a6e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000a6590620015f0565b60405180910390fd5b5b82905062000a85565b62000a84838362000ab0565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60008251111562000ac45781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000afa919062001612565b60405180910390fd5b6127b8806200163783390190565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000b528262000b25565b9050919050565b62000b648162000b45565b811462000b7057600080fd5b50565b60008135905062000b848162000b59565b92915050565b6000806040838503121562000ba45762000ba362000b1b565b5b600062000bb48582860162000b73565b925050602062000bc78582860162000b73565b9150509250929050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b62000c268262000bdb565b810181811067ffffffffffffffff8211171562000c485762000c4762000bec565b5b80604052505050565b600062000c5d62000b11565b905062000c6b828262000c1b565b919050565b600067ffffffffffffffff82111562000c8e5762000c8d62000bec565b5b62000c998262000bdb565b9050602081019050919050565b82818337600083830152505050565b600062000ccc62000cc68462000c70565b62000c51565b90508281526020810184848401111562000ceb5762000cea62000bd6565b5b62000cf884828562000ca6565b509392505050565b600082601f83011262000d185762000d1762000bd1565b5b813562000d2a84826020860162000cb5565b91505092915050565b6000819050919050565b62000d488162000d33565b811462000d5457600080fd5b50565b60008135905062000d688162000d3d565b92915050565b60008060006060848603121562000d8a5762000d8962000b1b565b5b600084013567ffffffffffffffff81111562000dab5762000daa62000b20565b5b62000db98682870162000d00565b935050602084013567ffffffffffffffff81111562000ddd5762000ddc62000b20565b5b62000deb8682870162000d00565b925050604062000dfe8682870162000d57565b9150509250925092565b600062000e158262000b25565b9050919050565b62000e278162000e08565b811462000e3357600080fd5b50565b60008135905062000e478162000e1c565b92915050565b60006020828403121562000e665762000e6562000b1b565b5b600062000e768482850162000e36565b91505092915050565b62000e8a8162000b45565b82525050565b600060208201905062000ea7600083018462000e7f565b92915050565b62000eb88162000d33565b82525050565b600060208201905062000ed5600083018462000ead565b92915050565b60006020828403121562000ef45762000ef362000b1b565b5b600062000f048482850162000d57565b91505092915050565b6000819050919050565b600062000f3862000f3262000f2c8462000b25565b62000f0d565b62000b25565b9050919050565b600062000f4c8262000f17565b9050919050565b600062000f608262000f3f565b9050919050565b62000f728162000f53565b82525050565b600060208201905062000f8f600083018462000f67565b92915050565b60006020828403121562000fae5762000fad62000b1b565b5b600062000fbe8482850162000b73565b91505092915050565b60008151905062000fd88162000d3d565b92915050565b60006020828403121562000ff75762000ff662000b1b565b5b6000620010078482850162000fc7565b91505092915050565b600082825260208201905092915050565b7f546f6b656e466163746f72793a20796f75206469646e27742070617920666f7260008201527f20746f6b656e206372656174696f6e0000000000000000000000000000000000602082015250565b60006200107f602f8362001010565b91506200108c8262001021565b604082019050919050565b60006020820190508181036000830152620010b28162001070565b9050919050565b600081519050919050565b60005b83811015620010e4578082015181840152602081019050620010c7565b83811115620010f4576000848401525b50505050565b60006200110782620010b9565b62001113818562001010565b935062001125818560208601620010c4565b620011308162000bdb565b840191505092915050565b60006060820190508181036000830152620011578186620010fa565b905081810360208301526200116d8185620010fa565b90506200117e604083018462000ead565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620011c28262000d33565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415620011f857620011f762001186565b5b600182019050919050565b6000620012108262000d33565b91506200121d8362000d33565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161562001259576200125862001186565b5b828202905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000620012c260268362001010565b9150620012cf8262001264565b604082019050919050565b60006020820190508181036000830152620012f581620012b3565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006200133460208362001010565b91506200134182620012fc565b602082019050919050565b60006020820190508181036000830152620013678162001325565b9050919050565b600060408201905062001385600083018562000e7f565b62001394602083018462000ead565b9392505050565b60008115159050919050565b620013b2816200139b565b8114620013be57600080fd5b50565b600081519050620013d281620013a7565b92915050565b600060208284031215620013f157620013f062000b1b565b5b60006200140184828501620013c1565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b600062001468602a8362001010565b915062001475826200140a565b604082019050919050565b600060208201905081810360008301526200149b8162001459565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b60006200150060268362001010565b91506200150d82620014a2565b604082019050919050565b600060208201905081810360008301526200153381620014f1565b9050919050565b600081519050919050565b600081905092915050565b60006200155d826200153a565b62001569818562001545565b93506200157b818560208601620010c4565b80840191505092915050565b600062001595828462001550565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000620015d8601d8362001010565b9150620015e582620015a0565b602082019050919050565b600060208201905081810360008301526200160b81620015c9565b9050919050565b600060208201905081810360008301526200162e8184620010fa565b90509291505056fe60806040523480156200001157600080fd5b50604051620027b8380380620027b883398181016040528101906200003791906200065d565b8282816003908051906020019062000051929190620003d5565b5080600490805190602001906200006a929190620003d5565b5050506000600560006101000a81548160ff021916908315150217905550620000a86200009c620000ed60201b60201c565b620000f560201b60201c565b620000e433620000bd620001bb60201b60201c565b600a620000cb919062000887565b83620000d89190620008d8565b620001c460201b60201c565b50505062000b1e565b600033905090565b6000600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60006012905090565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141562000237576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200022e906200099a565b60405180910390fd5b6200024b600083836200033260201b60201c565b80600260008282546200025f9190620009bc565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405162000312919062000a2a565b60405180910390a36200032e600083836200035f60201b60201c565b5050565b620003426200036460201b60201c565b6200035a838383620003b960201b620007f61760201c565b505050565b505050565b62000374620003be60201b60201c565b15620003b7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003ae9062000a97565b60405180910390fd5b565b505050565b6000600560009054906101000a900460ff16905090565b828054620003e39062000ae8565b90600052602060002090601f01602090048101928262000407576000855562000453565b82601f106200042257805160ff191683800117855562000453565b8280016001018555821562000453579182015b828111156200045257825182559160200191906001019062000435565b5b50905062000462919062000466565b5090565b5b808211156200048157600081600090555060010162000467565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620004ee82620004a3565b810181811067ffffffffffffffff8211171562000510576200050f620004b4565b5b80604052505050565b60006200052562000485565b9050620005338282620004e3565b919050565b600067ffffffffffffffff821115620005565762000555620004b4565b5b6200056182620004a3565b9050602081019050919050565b60005b838110156200058e57808201518184015260208101905062000571565b838111156200059e576000848401525b50505050565b6000620005bb620005b58462000538565b62000519565b905082815260208101848484011115620005da57620005d96200049e565b5b620005e78482856200056e565b509392505050565b600082601f83011262000607576200060662000499565b5b815162000619848260208601620005a4565b91505092915050565b6000819050919050565b620006378162000622565b81146200064357600080fd5b50565b60008151905062000657816200062c565b92915050565b6000806000606084860312156200067957620006786200048f565b5b600084015167ffffffffffffffff8111156200069a576200069962000494565b5b620006a886828701620005ef565b935050602084015167ffffffffffffffff811115620006cc57620006cb62000494565b5b620006da86828701620005ef565b9250506040620006ed8682870162000646565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b600185111562000785578086048111156200075d576200075c620006f7565b5b60018516156200076d5780820291505b80810290506200077d8562000726565b94506200073d565b94509492505050565b600082620007a0576001905062000873565b81620007b0576000905062000873565b8160018114620007c95760028114620007d4576200080a565b600191505062000873565b60ff841115620007e957620007e8620006f7565b5b8360020a915084821115620008035762000802620006f7565b5b5062000873565b5060208310610133831016604e8410600b8410161715620008445782820a9050838111156200083e576200083d620006f7565b5b62000873565b62000853848484600162000733565b925090508184048111156200086d576200086c620006f7565b5b81810290505b9392505050565b600060ff82169050919050565b6000620008948262000622565b9150620008a1836200087a565b9250620008d07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846200078e565b905092915050565b6000620008e58262000622565b9150620008f28362000622565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156200092e576200092d620006f7565b5b828202905092915050565b600082825260208201905092915050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b600062000982601f8362000939565b91506200098f826200094a565b602082019050919050565b60006020820190508181036000830152620009b58162000973565b9050919050565b6000620009c98262000622565b9150620009d68362000622565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111562000a0e5762000a0d620006f7565b5b828201905092915050565b62000a248162000622565b82525050565b600060208201905062000a41600083018462000a19565b92915050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b600062000a7f60108362000939565b915062000a8c8262000a47565b602082019050919050565b6000602082019050818103600083015262000ab28162000a70565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168062000b0157607f821691505b6020821081141562000b185762000b1762000ab9565b5b50919050565b611c8a8062000b2e6000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c806370a08231116100ad57806395d89b411161007157806395d89b41146102d2578063a457c2d7146102f0578063a9059cbb14610320578063dd62ed3e14610350578063f2fde38b1461038057610121565b806370a0823114610254578063715018a61461028457806379cc67901461028e5780638456cb59146102aa5780638da5cb5b146102b457610121565b8063313ce567116100f4578063313ce567146101c257806339509351146101e05780633f4ba83a1461021057806342966c681461021a5780635c975abb1461023657610121565b806306fdde0314610126578063095ea7b31461014457806318160ddd1461017457806323b872dd14610192575b600080fd5b61012e61039c565b60405161013b91906111f3565b60405180910390f35b61015e600480360381019061015991906112ae565b61042e565b60405161016b9190611309565b60405180910390f35b61017c610451565b6040516101899190611333565b60405180910390f35b6101ac60048036038101906101a7919061134e565b61045b565b6040516101b99190611309565b60405180910390f35b6101ca61048a565b6040516101d791906113bd565b60405180910390f35b6101fa60048036038101906101f591906112ae565b610493565b6040516102079190611309565b60405180910390f35b6102186104ca565b005b610234600480360381019061022f91906113d8565b6104dc565b005b61023e6104f0565b60405161024b9190611309565b60405180910390f35b61026e60048036038101906102699190611405565b610507565b60405161027b9190611333565b60405180910390f35b61028c61054f565b005b6102a860048036038101906102a391906112ae565b610563565b005b6102b2610583565b005b6102bc610595565b6040516102c99190611441565b60405180910390f35b6102da6105bf565b6040516102e791906111f3565b60405180910390f35b61030a600480360381019061030591906112ae565b610651565b6040516103179190611309565b60405180910390f35b61033a600480360381019061033591906112ae565b6106c8565b6040516103479190611309565b60405180910390f35b61036a6004803603810190610365919061145c565b6106eb565b6040516103779190611333565b60405180910390f35b61039a60048036038101906103959190611405565b610772565b005b6060600380546103ab906114cb565b80601f01602080910402602001604051908101604052809291908181526020018280546103d7906114cb565b80156104245780601f106103f957610100808354040283529160200191610424565b820191906000526020600020905b81548152906001019060200180831161040757829003601f168201915b5050505050905090565b6000806104396107fb565b9050610446818585610803565b600191505092915050565b6000600254905090565b6000806104666107fb565b90506104738582856109ce565b61047e858585610a5a565b60019150509392505050565b60006012905090565b60008061049e6107fb565b90506104bf8185856104b085896106eb565b6104ba919061152c565b610803565b600191505092915050565b6104d2610cd2565b6104da610d50565b565b6104ed6104e76107fb565b82610db3565b50565b6000600560009054906101000a900460ff16905090565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610557610cd2565b6105616000610f81565b565b6105758261056f6107fb565b836109ce565b61057f8282610db3565b5050565b61058b610cd2565b610593611047565b565b6000600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600480546105ce906114cb565b80601f01602080910402602001604051908101604052809291908181526020018280546105fa906114cb565b80156106475780601f1061061c57610100808354040283529160200191610647565b820191906000526020600020905b81548152906001019060200180831161062a57829003601f168201915b5050505050905090565b60008061065c6107fb565b9050600061066a82866106eb565b9050838110156106af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a6906115f4565b60405180910390fd5b6106bc8286868403610803565b60019250505092915050565b6000806106d36107fb565b90506106e0818585610a5a565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b61077a610cd2565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156107ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e190611686565b60405180910390fd5b6107f381610f81565b50565b505050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610873576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086a90611718565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156108e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108da906117aa565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516109c19190611333565b60405180910390a3505050565b60006109da84846106eb565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610a545781811015610a46576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3d90611816565b60405180910390fd5b610a538484848403610803565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610aca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac1906118a8565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610b3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b319061193a565b60405180910390fd5b610b458383836110aa565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610bcb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc2906119cc565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610cb99190611333565b60405180910390a3610ccc8484846110c2565b50505050565b610cda6107fb565b73ffffffffffffffffffffffffffffffffffffffff16610cf8610595565b73ffffffffffffffffffffffffffffffffffffffff1614610d4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4590611a38565b60405180910390fd5b565b610d586110c7565b6000600560006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa610d9c6107fb565b604051610da99190611441565b60405180910390a1565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610e23576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1a90611aca565b60405180910390fd5b610e2f826000836110aa565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610eb5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eac90611b5c565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610f689190611333565b60405180910390a3610f7c836000846110c2565b505050565b6000600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61104f611110565b6001600560006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586110936107fb565b6040516110a09190611441565b60405180910390a1565b6110b2611110565b6110bd8383836107f6565b505050565b505050565b6110cf6104f0565b61110e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161110590611bc8565b60405180910390fd5b565b6111186104f0565b15611158576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161114f90611c34565b60405180910390fd5b565b600081519050919050565b600082825260208201905092915050565b60005b83811015611194578082015181840152602081019050611179565b838111156111a3576000848401525b50505050565b6000601f19601f8301169050919050565b60006111c58261115a565b6111cf8185611165565b93506111df818560208601611176565b6111e8816111a9565b840191505092915050565b6000602082019050818103600083015261120d81846111ba565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006112458261121a565b9050919050565b6112558161123a565b811461126057600080fd5b50565b6000813590506112728161124c565b92915050565b6000819050919050565b61128b81611278565b811461129657600080fd5b50565b6000813590506112a881611282565b92915050565b600080604083850312156112c5576112c4611215565b5b60006112d385828601611263565b92505060206112e485828601611299565b9150509250929050565b60008115159050919050565b611303816112ee565b82525050565b600060208201905061131e60008301846112fa565b92915050565b61132d81611278565b82525050565b60006020820190506113486000830184611324565b92915050565b60008060006060848603121561136757611366611215565b5b600061137586828701611263565b935050602061138686828701611263565b925050604061139786828701611299565b9150509250925092565b600060ff82169050919050565b6113b7816113a1565b82525050565b60006020820190506113d260008301846113ae565b92915050565b6000602082840312156113ee576113ed611215565b5b60006113fc84828501611299565b91505092915050565b60006020828403121561141b5761141a611215565b5b600061142984828501611263565b91505092915050565b61143b8161123a565b82525050565b60006020820190506114566000830184611432565b92915050565b6000806040838503121561147357611472611215565b5b600061148185828601611263565b925050602061149285828601611263565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806114e357607f821691505b602082108114156114f7576114f661149c565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061153782611278565b915061154283611278565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611577576115766114fd565b5b828201905092915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b60006115de602583611165565b91506115e982611582565b604082019050919050565b6000602082019050818103600083015261160d816115d1565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611670602683611165565b915061167b82611614565b604082019050919050565b6000602082019050818103600083015261169f81611663565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000611702602483611165565b915061170d826116a6565b604082019050919050565b60006020820190508181036000830152611731816116f5565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000611794602283611165565b915061179f82611738565b604082019050919050565b600060208201905081810360008301526117c381611787565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b6000611800601d83611165565b915061180b826117ca565b602082019050919050565b6000602082019050818103600083015261182f816117f3565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000611892602583611165565b915061189d82611836565b604082019050919050565b600060208201905081810360008301526118c181611885565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000611924602383611165565b915061192f826118c8565b604082019050919050565b6000602082019050818103600083015261195381611917565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b60006119b6602683611165565b91506119c18261195a565b604082019050919050565b600060208201905081810360008301526119e5816119a9565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611a22602083611165565b9150611a2d826119ec565b602082019050919050565b60006020820190508181036000830152611a5181611a15565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000611ab4602183611165565b9150611abf82611a58565b604082019050919050565b60006020820190508181036000830152611ae381611aa7565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b6000611b46602283611165565b9150611b5182611aea565b604082019050919050565b60006020820190508181036000830152611b7581611b39565b9050919050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b6000611bb2601483611165565b9150611bbd82611b7c565b602082019050919050565b60006020820190508181036000830152611be181611ba5565b9050919050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b6000611c1e601083611165565b9150611c2982611be8565b602082019050919050565b60006020820190508181036000830152611c4d81611c11565b905091905056fea264697066735822122066eb6c68878fa790378acd97beb0575edd3855296cdd291e6f68372230cc876764736f6c63430008090033a26469706673582212205a1927bfae5a88b27df033d56b542a2e6311744b38bd3bc1d4f832ccfd792e3b64736f6c63430008090033",
  "deployedBytecode": "0x608060405260043610620000a35760003560e01c8063a035b1fe1162000061578063a035b1fe1462000176578063a2b40d1914620001a6578063af640d0f14620001d4578063d16901601462000204578063f2fde38b146200024857620000ab565b80633aeac4e114620000b05780635b06053014620000de578063690d832014620000fe578063715018a6146200012c5780638da5cb5b146200014657620000ab565b36620000ab57005b600080fd5b348015620000bd57600080fd5b50620000dc6004803603810190620000d6919062000b8a565b62000276565b005b620000fc6004803603810190620000f6919062000d6e565b62000345565b005b3480156200010b57600080fd5b506200012a600480360381019062000124919062000e4d565b620004ff565b005b3480156200013957600080fd5b506200014462000554565b005b3480156200015357600080fd5b506200015e6200056c565b6040516200016d919062000e90565b60405180910390f35b3480156200018357600080fd5b506200018e62000595565b6040516200019d919062000ebe565b60405180910390f35b348015620001b357600080fd5b50620001d26004803603810190620001cc919062000edb565b6200059b565b005b348015620001e157600080fd5b50620001ec620005af565b604051620001fb919062000ebe565b60405180910390f35b3480156200021157600080fd5b506200023060048036038101906200022a919062000edb565b620005b5565b6040516200023f919062000f78565b60405180910390f35b3480156200025557600080fd5b506200027460048036038101906200026e919062000f95565b620005e8565b005b6200028062000673565b600081905062000340838273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401620002c5919062000e90565b60206040518083038186803b158015620002de57600080fd5b505afa158015620002f3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000319919062000fde565b8373ffffffffffffffffffffffffffffffffffffffff16620006f89092919063ffffffff16565b505050565b6001543410156200038d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003849062001097565b60405180910390fd5b6000838383604051620003a09062000b03565b620003ae939291906200113b565b604051809103906000f080158015620003cb573d6000803e3d6000fd5b5090508060036000600260008154620003e490620011b5565b919050819055815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1663f2fde38b6200045c62000782565b6040518263ffffffff1660e01b81526004016200047a919062000e90565b600060405180830381600087803b1580156200049557600080fd5b505af1158015620004aa573d6000803e3d6000fd5b50505050620004f9620004bc62000782565b670de0b6b3a764000084620004d2919062001203565b8373ffffffffffffffffffffffffffffffffffffffff16620006f89092919063ffffffff16565b50505050565b6200050962000673565b8073ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505015801562000550573d6000803e3d6000fd5b5050565b6200055e62000673565b6200056a60006200078a565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60015481565b620005a562000673565b8060018190555050565b60025481565b60036020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b620005f262000673565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141562000665576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200065c90620012da565b60405180910390fd5b62000670816200078a565b50565b6200067d62000782565b73ffffffffffffffffffffffffffffffffffffffff166200069d6200056c565b73ffffffffffffffffffffffffffffffffffffffff1614620006f6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620006ed906200134c565b60405180910390fd5b565b6200077d8363a9059cbb60e01b84846040516024016200071a9291906200136e565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506200084e565b505050565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000620008b2826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166200091d9092919063ffffffff16565b9050600081511115620009185780806020019051810190620008d59190620013d8565b62000917576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200090e9062001480565b60405180910390fd5b5b505050565b60606200092e848460008562000937565b90509392505050565b6060824710156200097f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620009769062001518565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051620009aa919062001587565b60006040518083038185875af1925050503d8060008114620009e9576040519150601f19603f3d011682016040523d82523d6000602084013e620009ee565b606091505b509150915062000a018783838762000a0d565b92505050949350505050565b6060831562000a785760008351141562000a6f5762000a2c8562000a8d565b62000a6e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000a6590620015f0565b60405180910390fd5b5b82905062000a85565b62000a84838362000ab0565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60008251111562000ac45781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000afa919062001612565b60405180910390fd5b6127b8806200163783390190565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000b528262000b25565b9050919050565b62000b648162000b45565b811462000b7057600080fd5b50565b60008135905062000b848162000b59565b92915050565b6000806040838503121562000ba45762000ba362000b1b565b5b600062000bb48582860162000b73565b925050602062000bc78582860162000b73565b9150509250929050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b62000c268262000bdb565b810181811067ffffffffffffffff8211171562000c485762000c4762000bec565b5b80604052505050565b600062000c5d62000b11565b905062000c6b828262000c1b565b919050565b600067ffffffffffffffff82111562000c8e5762000c8d62000bec565b5b62000c998262000bdb565b9050602081019050919050565b82818337600083830152505050565b600062000ccc62000cc68462000c70565b62000c51565b90508281526020810184848401111562000ceb5762000cea62000bd6565b5b62000cf884828562000ca6565b509392505050565b600082601f83011262000d185762000d1762000bd1565b5b813562000d2a84826020860162000cb5565b91505092915050565b6000819050919050565b62000d488162000d33565b811462000d5457600080fd5b50565b60008135905062000d688162000d3d565b92915050565b60008060006060848603121562000d8a5762000d8962000b1b565b5b600084013567ffffffffffffffff81111562000dab5762000daa62000b20565b5b62000db98682870162000d00565b935050602084013567ffffffffffffffff81111562000ddd5762000ddc62000b20565b5b62000deb8682870162000d00565b925050604062000dfe8682870162000d57565b9150509250925092565b600062000e158262000b25565b9050919050565b62000e278162000e08565b811462000e3357600080fd5b50565b60008135905062000e478162000e1c565b92915050565b60006020828403121562000e665762000e6562000b1b565b5b600062000e768482850162000e36565b91505092915050565b62000e8a8162000b45565b82525050565b600060208201905062000ea7600083018462000e7f565b92915050565b62000eb88162000d33565b82525050565b600060208201905062000ed5600083018462000ead565b92915050565b60006020828403121562000ef45762000ef362000b1b565b5b600062000f048482850162000d57565b91505092915050565b6000819050919050565b600062000f3862000f3262000f2c8462000b25565b62000f0d565b62000b25565b9050919050565b600062000f4c8262000f17565b9050919050565b600062000f608262000f3f565b9050919050565b62000f728162000f53565b82525050565b600060208201905062000f8f600083018462000f67565b92915050565b60006020828403121562000fae5762000fad62000b1b565b5b600062000fbe8482850162000b73565b91505092915050565b60008151905062000fd88162000d3d565b92915050565b60006020828403121562000ff75762000ff662000b1b565b5b6000620010078482850162000fc7565b91505092915050565b600082825260208201905092915050565b7f546f6b656e466163746f72793a20796f75206469646e27742070617920666f7260008201527f20746f6b656e206372656174696f6e0000000000000000000000000000000000602082015250565b60006200107f602f8362001010565b91506200108c8262001021565b604082019050919050565b60006020820190508181036000830152620010b28162001070565b9050919050565b600081519050919050565b60005b83811015620010e4578082015181840152602081019050620010c7565b83811115620010f4576000848401525b50505050565b60006200110782620010b9565b62001113818562001010565b935062001125818560208601620010c4565b620011308162000bdb565b840191505092915050565b60006060820190508181036000830152620011578186620010fa565b905081810360208301526200116d8185620010fa565b90506200117e604083018462000ead565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620011c28262000d33565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415620011f857620011f762001186565b5b600182019050919050565b6000620012108262000d33565b91506200121d8362000d33565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161562001259576200125862001186565b5b828202905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000620012c260268362001010565b9150620012cf8262001264565b604082019050919050565b60006020820190508181036000830152620012f581620012b3565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006200133460208362001010565b91506200134182620012fc565b602082019050919050565b60006020820190508181036000830152620013678162001325565b9050919050565b600060408201905062001385600083018562000e7f565b62001394602083018462000ead565b9392505050565b60008115159050919050565b620013b2816200139b565b8114620013be57600080fd5b50565b600081519050620013d281620013a7565b92915050565b600060208284031215620013f157620013f062000b1b565b5b60006200140184828501620013c1565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b600062001468602a8362001010565b915062001475826200140a565b604082019050919050565b600060208201905081810360008301526200149b8162001459565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b60006200150060268362001010565b91506200150d82620014a2565b604082019050919050565b600060208201905081810360008301526200153381620014f1565b9050919050565b600081519050919050565b600081905092915050565b60006200155d826200153a565b62001569818562001545565b93506200157b818560208601620010c4565b80840191505092915050565b600062001595828462001550565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000620015d8601d8362001010565b9150620015e582620015a0565b602082019050919050565b600060208201905081810360008301526200160b81620015c9565b9050919050565b600060208201905081810360008301526200162e8184620010fa565b90509291505056fe60806040523480156200001157600080fd5b50604051620027b8380380620027b883398181016040528101906200003791906200065d565b8282816003908051906020019062000051929190620003d5565b5080600490805190602001906200006a929190620003d5565b5050506000600560006101000a81548160ff021916908315150217905550620000a86200009c620000ed60201b60201c565b620000f560201b60201c565b620000e433620000bd620001bb60201b60201c565b600a620000cb919062000887565b83620000d89190620008d8565b620001c460201b60201c565b50505062000b1e565b600033905090565b6000600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60006012905090565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141562000237576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200022e906200099a565b60405180910390fd5b6200024b600083836200033260201b60201c565b80600260008282546200025f9190620009bc565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405162000312919062000a2a565b60405180910390a36200032e600083836200035f60201b60201c565b5050565b620003426200036460201b60201c565b6200035a838383620003b960201b620007f61760201c565b505050565b505050565b62000374620003be60201b60201c565b15620003b7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003ae9062000a97565b60405180910390fd5b565b505050565b6000600560009054906101000a900460ff16905090565b828054620003e39062000ae8565b90600052602060002090601f01602090048101928262000407576000855562000453565b82601f106200042257805160ff191683800117855562000453565b8280016001018555821562000453579182015b828111156200045257825182559160200191906001019062000435565b5b50905062000462919062000466565b5090565b5b808211156200048157600081600090555060010162000467565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620004ee82620004a3565b810181811067ffffffffffffffff8211171562000510576200050f620004b4565b5b80604052505050565b60006200052562000485565b9050620005338282620004e3565b919050565b600067ffffffffffffffff821115620005565762000555620004b4565b5b6200056182620004a3565b9050602081019050919050565b60005b838110156200058e57808201518184015260208101905062000571565b838111156200059e576000848401525b50505050565b6000620005bb620005b58462000538565b62000519565b905082815260208101848484011115620005da57620005d96200049e565b5b620005e78482856200056e565b509392505050565b600082601f83011262000607576200060662000499565b5b815162000619848260208601620005a4565b91505092915050565b6000819050919050565b620006378162000622565b81146200064357600080fd5b50565b60008151905062000657816200062c565b92915050565b6000806000606084860312156200067957620006786200048f565b5b600084015167ffffffffffffffff8111156200069a576200069962000494565b5b620006a886828701620005ef565b935050602084015167ffffffffffffffff811115620006cc57620006cb62000494565b5b620006da86828701620005ef565b9250506040620006ed8682870162000646565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b600185111562000785578086048111156200075d576200075c620006f7565b5b60018516156200076d5780820291505b80810290506200077d8562000726565b94506200073d565b94509492505050565b600082620007a0576001905062000873565b81620007b0576000905062000873565b8160018114620007c95760028114620007d4576200080a565b600191505062000873565b60ff841115620007e957620007e8620006f7565b5b8360020a915084821115620008035762000802620006f7565b5b5062000873565b5060208310610133831016604e8410600b8410161715620008445782820a9050838111156200083e576200083d620006f7565b5b62000873565b62000853848484600162000733565b925090508184048111156200086d576200086c620006f7565b5b81810290505b9392505050565b600060ff82169050919050565b6000620008948262000622565b9150620008a1836200087a565b9250620008d07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846200078e565b905092915050565b6000620008e58262000622565b9150620008f28362000622565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156200092e576200092d620006f7565b5b828202905092915050565b600082825260208201905092915050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b600062000982601f8362000939565b91506200098f826200094a565b602082019050919050565b60006020820190508181036000830152620009b58162000973565b9050919050565b6000620009c98262000622565b9150620009d68362000622565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111562000a0e5762000a0d620006f7565b5b828201905092915050565b62000a248162000622565b82525050565b600060208201905062000a41600083018462000a19565b92915050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b600062000a7f60108362000939565b915062000a8c8262000a47565b602082019050919050565b6000602082019050818103600083015262000ab28162000a70565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168062000b0157607f821691505b6020821081141562000b185762000b1762000ab9565b5b50919050565b611c8a8062000b2e6000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c806370a08231116100ad57806395d89b411161007157806395d89b41146102d2578063a457c2d7146102f0578063a9059cbb14610320578063dd62ed3e14610350578063f2fde38b1461038057610121565b806370a0823114610254578063715018a61461028457806379cc67901461028e5780638456cb59146102aa5780638da5cb5b146102b457610121565b8063313ce567116100f4578063313ce567146101c257806339509351146101e05780633f4ba83a1461021057806342966c681461021a5780635c975abb1461023657610121565b806306fdde0314610126578063095ea7b31461014457806318160ddd1461017457806323b872dd14610192575b600080fd5b61012e61039c565b60405161013b91906111f3565b60405180910390f35b61015e600480360381019061015991906112ae565b61042e565b60405161016b9190611309565b60405180910390f35b61017c610451565b6040516101899190611333565b60405180910390f35b6101ac60048036038101906101a7919061134e565b61045b565b6040516101b99190611309565b60405180910390f35b6101ca61048a565b6040516101d791906113bd565b60405180910390f35b6101fa60048036038101906101f591906112ae565b610493565b6040516102079190611309565b60405180910390f35b6102186104ca565b005b610234600480360381019061022f91906113d8565b6104dc565b005b61023e6104f0565b60405161024b9190611309565b60405180910390f35b61026e60048036038101906102699190611405565b610507565b60405161027b9190611333565b60405180910390f35b61028c61054f565b005b6102a860048036038101906102a391906112ae565b610563565b005b6102b2610583565b005b6102bc610595565b6040516102c99190611441565b60405180910390f35b6102da6105bf565b6040516102e791906111f3565b60405180910390f35b61030a600480360381019061030591906112ae565b610651565b6040516103179190611309565b60405180910390f35b61033a600480360381019061033591906112ae565b6106c8565b6040516103479190611309565b60405180910390f35b61036a6004803603810190610365919061145c565b6106eb565b6040516103779190611333565b60405180910390f35b61039a60048036038101906103959190611405565b610772565b005b6060600380546103ab906114cb565b80601f01602080910402602001604051908101604052809291908181526020018280546103d7906114cb565b80156104245780601f106103f957610100808354040283529160200191610424565b820191906000526020600020905b81548152906001019060200180831161040757829003601f168201915b5050505050905090565b6000806104396107fb565b9050610446818585610803565b600191505092915050565b6000600254905090565b6000806104666107fb565b90506104738582856109ce565b61047e858585610a5a565b60019150509392505050565b60006012905090565b60008061049e6107fb565b90506104bf8185856104b085896106eb565b6104ba919061152c565b610803565b600191505092915050565b6104d2610cd2565b6104da610d50565b565b6104ed6104e76107fb565b82610db3565b50565b6000600560009054906101000a900460ff16905090565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610557610cd2565b6105616000610f81565b565b6105758261056f6107fb565b836109ce565b61057f8282610db3565b5050565b61058b610cd2565b610593611047565b565b6000600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600480546105ce906114cb565b80601f01602080910402602001604051908101604052809291908181526020018280546105fa906114cb565b80156106475780601f1061061c57610100808354040283529160200191610647565b820191906000526020600020905b81548152906001019060200180831161062a57829003601f168201915b5050505050905090565b60008061065c6107fb565b9050600061066a82866106eb565b9050838110156106af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a6906115f4565b60405180910390fd5b6106bc8286868403610803565b60019250505092915050565b6000806106d36107fb565b90506106e0818585610a5a565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b61077a610cd2565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156107ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e190611686565b60405180910390fd5b6107f381610f81565b50565b505050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610873576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086a90611718565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156108e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108da906117aa565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516109c19190611333565b60405180910390a3505050565b60006109da84846106eb565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610a545781811015610a46576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3d90611816565b60405180910390fd5b610a538484848403610803565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610aca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac1906118a8565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610b3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b319061193a565b60405180910390fd5b610b458383836110aa565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610bcb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc2906119cc565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610cb99190611333565b60405180910390a3610ccc8484846110c2565b50505050565b610cda6107fb565b73ffffffffffffffffffffffffffffffffffffffff16610cf8610595565b73ffffffffffffffffffffffffffffffffffffffff1614610d4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4590611a38565b60405180910390fd5b565b610d586110c7565b6000600560006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa610d9c6107fb565b604051610da99190611441565b60405180910390a1565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610e23576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1a90611aca565b60405180910390fd5b610e2f826000836110aa565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610eb5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eac90611b5c565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610f689190611333565b60405180910390a3610f7c836000846110c2565b505050565b6000600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61104f611110565b6001600560006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586110936107fb565b6040516110a09190611441565b60405180910390a1565b6110b2611110565b6110bd8383836107f6565b505050565b505050565b6110cf6104f0565b61110e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161110590611bc8565b60405180910390fd5b565b6111186104f0565b15611158576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161114f90611c34565b60405180910390fd5b565b600081519050919050565b600082825260208201905092915050565b60005b83811015611194578082015181840152602081019050611179565b838111156111a3576000848401525b50505050565b6000601f19601f8301169050919050565b60006111c58261115a565b6111cf8185611165565b93506111df818560208601611176565b6111e8816111a9565b840191505092915050565b6000602082019050818103600083015261120d81846111ba565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006112458261121a565b9050919050565b6112558161123a565b811461126057600080fd5b50565b6000813590506112728161124c565b92915050565b6000819050919050565b61128b81611278565b811461129657600080fd5b50565b6000813590506112a881611282565b92915050565b600080604083850312156112c5576112c4611215565b5b60006112d385828601611263565b92505060206112e485828601611299565b9150509250929050565b60008115159050919050565b611303816112ee565b82525050565b600060208201905061131e60008301846112fa565b92915050565b61132d81611278565b82525050565b60006020820190506113486000830184611324565b92915050565b60008060006060848603121561136757611366611215565b5b600061137586828701611263565b935050602061138686828701611263565b925050604061139786828701611299565b9150509250925092565b600060ff82169050919050565b6113b7816113a1565b82525050565b60006020820190506113d260008301846113ae565b92915050565b6000602082840312156113ee576113ed611215565b5b60006113fc84828501611299565b91505092915050565b60006020828403121561141b5761141a611215565b5b600061142984828501611263565b91505092915050565b61143b8161123a565b82525050565b60006020820190506114566000830184611432565b92915050565b6000806040838503121561147357611472611215565b5b600061148185828601611263565b925050602061149285828601611263565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806114e357607f821691505b602082108114156114f7576114f661149c565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061153782611278565b915061154283611278565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611577576115766114fd565b5b828201905092915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b60006115de602583611165565b91506115e982611582565b604082019050919050565b6000602082019050818103600083015261160d816115d1565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611670602683611165565b915061167b82611614565b604082019050919050565b6000602082019050818103600083015261169f81611663565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000611702602483611165565b915061170d826116a6565b604082019050919050565b60006020820190508181036000830152611731816116f5565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000611794602283611165565b915061179f82611738565b604082019050919050565b600060208201905081810360008301526117c381611787565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b6000611800601d83611165565b915061180b826117ca565b602082019050919050565b6000602082019050818103600083015261182f816117f3565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000611892602583611165565b915061189d82611836565b604082019050919050565b600060208201905081810360008301526118c181611885565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000611924602383611165565b915061192f826118c8565b604082019050919050565b6000602082019050818103600083015261195381611917565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b60006119b6602683611165565b91506119c18261195a565b604082019050919050565b600060208201905081810360008301526119e5816119a9565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611a22602083611165565b9150611a2d826119ec565b602082019050919050565b60006020820190508181036000830152611a5181611a15565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000611ab4602183611165565b9150611abf82611a58565b604082019050919050565b60006020820190508181036000830152611ae381611aa7565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b6000611b46602283611165565b9150611b5182611aea565b604082019050919050565b60006020820190508181036000830152611b7581611b39565b9050919050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b6000611bb2601483611165565b9150611bbd82611b7c565b602082019050919050565b60006020820190508181036000830152611be181611ba5565b9050919050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b6000611c1e601083611165565b9150611c2982611be8565b602082019050919050565b60006020820190508181036000830152611c4d81611c11565b905091905056fea264697066735822122066eb6c68878fa790378acd97beb0575edd3855296cdd291e6f68372230cc876764736f6c63430008090033a26469706673582212205a1927bfae5a88b27df033d56b542a2e6311744b38bd3bc1d4f832ccfd792e3b64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/TokenFactory.sol:TokenFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1720,
        "contract": "contracts/TokenFactory.sol:TokenFactory",
        "label": "price",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1722,
        "contract": "contracts/TokenFactory.sol:TokenFactory",
        "label": "id",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1727,
        "contract": "contracts/TokenFactory.sol:TokenFactory",
        "label": "TokenToId",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_contract(Token)1702)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(Token)1702": {
        "encoding": "inplace",
        "label": "contract Token",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_contract(Token)1702)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => contract Token)",
        "numberOfBytes": "32",
        "value": "t_contract(Token)1702"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}